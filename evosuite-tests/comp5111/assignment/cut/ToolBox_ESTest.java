/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 29 05:50:04 GMT 2021
 */

package comp5111.assignment.cut;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import comp5111.assignment.cut.ToolBox;
import java.nio.CharBuffer;
import java.util.Locale;
import java.util.function.Supplier;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

//@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ToolBox_ESTest  {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'b';
      int int0 = ToolBox.StringTools.indexOfAnyBut((CharSequence) "=nws", charArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'l';
      charArray0[1] = 't';
      int int0 = ToolBox.StringTools.indexOfAny("comp5111.assignment.cut.ToolBox", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = ToolBox.StringTools.equals((CharSequence) "J9)_\"U", (CharSequence) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '@';
      boolean boolean0 = ToolBox.StringTools.containsNone(";6lG3cr", charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = ToolBox.StringTools.containsAny((CharSequence) "}@E", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      char[] charArray0 = new char[6];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      int int0 = ToolBox.CharSequenceTools.lastIndexOf(charBuffer0, "", 1846);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.flip();
      int int0 = ToolBox.CharSequenceTools.lastIndexOf(charBuffer0, charBuffer0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      char[] charArray0 = new char[6];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.put(charArray0);
      int int0 = ToolBox.CharSequenceTools.lastIndexOf(charBuffer0, 1224, (byte)1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(65);
      boolean boolean0 = ToolBox.StringTools.contains(charBuffer0, 65);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "\r");
      int int0 = ToolBox.CharSequenceTools.indexOf(charBuffer0, 0, 739);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = ToolBox.ArrayTools.getLength((Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      boolean boolean0 = ToolBox.StringTools.isEmpty("=nws");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      boolean boolean0 = ToolBox.ArrayTools.isEmpty(objectArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      char[] charArray0 = new char[6];
      boolean boolean0 = ToolBox.ArrayTools.isEmpty(charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      boolean boolean0 = ToolBox.StringTools.isCreatable("9)Ki,");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = ToolBox.StringTools.isCreatable(" ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = ToolBox.StringTools.isCreatable("X9Je|8b>E1/ot1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = ToolBox.StringTools.isCreatable("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = ToolBox.StringTools.isCreatable("hd");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(16);
      boolean boolean0 = ToolBox.StringTools.isMixedCase(charBuffer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = ToolBox.StringTools.isMixedCase("ItD8zG[~M,l>.#!.[.");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = ToolBox.StringTools.isMixedCase(" ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = ToolBox.StringTools.isMixedCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = ToolBox.StringTools.isAllUpperCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = ToolBox.StringTools.isAllUpperCase("Z@4(D9+%");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = ToolBox.StringTools.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = ToolBox.StringTools.isNumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "9";
      stringArray0[1] = "9";
      stringArray0[2] = "9";
      stringArray0[3] = "|Np%aM'-";
      stringArray0[4] = "9";
      stringArray0[5] = "9";
      stringArray0[6] = "|Np%aM'-";
      stringArray0[7] = "9";
      stringArray0[8] = "|Np%aM'-";
      String string0 = ToolBox.StringTools.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "TK 1`1FK>^*t3wXn";
      stringArray0[1] = "TK 1`1FK>^*t3wXn";
      stringArray0[2] = "TK 1`1FK>^*t3wXn";
      stringArray0[3] = "TK 1`1FK>^*t3wXn";
      stringArray0[4] = "TK 1`1FK>^*t3wXn";
      stringArray0[5] = "TK 1`1FK>^*t3wXn";
      stringArray0[6] = "TK 1`1FK>^*t3wXn";
      String string0 = ToolBox.StringTools.getCommonPrefix(stringArray0);
      assertEquals("TK 1`1FK>^*t3wXn", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String string0 = ToolBox.StringTools.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[1] = "";
      String string0 = ToolBox.StringTools.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      int int0 = ToolBox.StringTools.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = ToolBox.StringTools.indexOfAnyBut((CharSequence) "VN:i7] bRhllU&QJ|Y", (CharSequence) "(On?eP3,SNaIf) Tk");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = ToolBox.StringTools.indexOfAnyBut((CharSequence) "X9Je|8b>E1/ot1", (CharSequence) "X9Je|8b>E1/ot1");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = ToolBox.StringTools.indexOfAnyBut((CharSequence) " ", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = ToolBox.StringTools.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      int int0 = ToolBox.StringTools.indexOfAnyBut((CharSequence) charBuffer0, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = ToolBox.StringTools.indexOfAnyBut((CharSequence) "Cf_e$9`n9.S", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      char[] charArray0 = new char[5];
      int int0 = ToolBox.StringTools.indexOfAnyBut((CharSequence) null, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      char[] charArray0 = ToolBox.CharSequenceTools.toCharArray("X9Je|8b>E1/ot1");
      int int0 = ToolBox.StringTools.indexOfAny("X9Je|8b>E1/ot1", charArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      char[] charArray0 = ToolBox.CharSequenceTools.toCharArray(" ");
      int int0 = ToolBox.StringTools.indexOfAny(" ", charArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = ToolBox.StringTools.indexOfAny("\n", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      char[] charArray0 = new char[5];
      int int0 = ToolBox.StringTools.indexOfAny("", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = ToolBox.StringTools.getIfEmpty("", (Supplier<String>) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string0 = ToolBox.StringTools.getIfEmpty("", supplier0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = ToolBox.StringTools.getIfEmpty("TK 1`1FK>^*t3wXn", supplier0);
      assertEquals("TK 1`1FK>^*t3wXn", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "]p7pd13Ng{sAX";
      stringArray0[1] = "r?'";
      String string0 = ToolBox.StringTools.getCommonPrefix(stringArray0);
      assertEquals("]p7", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string0 = ToolBox.StringTools.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = ToolBox.StringTools.equals((CharSequence) "\"7jV@E", (CharSequence) "\"7jV@E");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "\r";
      CharBuffer charBuffer0 = CharBuffer.allocate(2557);
      boolean boolean0 = ToolBox.StringTools.equals(charSequenceArray0[0], (CharSequence) charBuffer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) " ");
      boolean boolean0 = ToolBox.StringTools.equals((CharSequence) " ", (CharSequence) charBuffer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = ToolBox.StringTools.equals((CharSequence) "comp5111.assignment.cut.ToolBox$ArrayTools", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean boolean0 = ToolBox.StringTools.equals((CharSequence) "hd", (CharSequence) "hd");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[5] = (CharSequence) "8&[+:I";
      boolean boolean0 = ToolBox.StringTools.equals((CharSequence) null, charSequenceArray0[5]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[7] = (CharSequence) "";
      boolean boolean0 = ToolBox.StringTools.containsNone(charSequenceArray0[7], (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      char[] charArray0 = ToolBox.CharSequenceTools.toCharArray(" ");
      boolean boolean0 = ToolBox.StringTools.containsNone(" ", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      char[] charArray0 = new char[2];
      boolean boolean0 = ToolBox.StringTools.containsNone((CharSequence) null, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'w';
      charArray0[1] = ')';
      charArray0[2] = 'y';
      charArray0[3] = 'z';
      charArray0[4] = '3';
      charArray0[5] = 'P';
      CharBuffer charBuffer0 = CharBuffer.allocate(13);
      boolean boolean0 = ToolBox.StringTools.containsAny((CharSequence) charBuffer0, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      boolean boolean0 = ToolBox.StringTools.contains((CharSequence) null, (-2397));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = ToolBox.StringTools.compareIgnoreCase("", (String) null, false);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = ToolBox.StringTools.compareIgnoreCase((String) null, " ", false);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = ToolBox.StringTools.compareIgnoreCase("_o<", "_o<", true);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = ToolBox.StringTools.compareIgnoreCase("hd", "comp5111.assignment.cut.ToolBox$CharSequenceTools", false);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = ToolBox.StringTools.compare("Qt", (String) null, false);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = ToolBox.StringTools.compare((String) null, "5e$+<J||x{w.", false);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = ToolBox.StringTools.compare("{6?\"tzlct3-Ct", "{6?\"tzlct3-Ct", false);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = ToolBox.StringTools.compare("8&[+:I", "", false);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = ToolBox.StringTools.length((CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = ToolBox.RegExTools.replacePattern("QlWP$MeMCT?r", "QlWP$MeMCT?r", (String) null);
      assertEquals("QlWP$MeMCT?r", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = ToolBox.RegExTools.replacePattern("", (String) null, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = ToolBox.RegExTools.replacePattern("Z@4(D9+%", "#|]#@dNHU", ":");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = ToolBox.RegExTools.replaceFirst("*D", "", "");
      assertEquals("*D", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = ToolBox.RegExTools.replaceFirst("TK 1`1FK>^*t3wXn", (String) null, "TK 1`1FK>^*t3wXn");
      assertEquals("TK 1`1FK>^*t3wXn", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = ToolBox.RegExTools.replaceFirst("", " ", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = ToolBox.RegExTools.replaceFirst((String) null, ":vv^", "W;'GZJP7v]`V");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("(On?eP3,SNaIf) Tk", (-699));
      String string0 = ToolBox.RegExTools.replaceFirst("VN:i7] bRhllU&QJ|Y", pattern0, (String) null);
      assertEquals("VN:i7] bRhllU&QJ|Y", string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("", 81);
      String string0 = ToolBox.RegExTools.replaceFirst("", pattern0, "8&[+:I");
      assertEquals("8&[+:I", string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = ToolBox.RegExTools.replaceFirst(":", (Pattern) null, "Z@4(D9+%");
      assertEquals(":", string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("comp5111.assignment.cut.ToolBox$LocaleTools");
      String string0 = ToolBox.RegExTools.replaceFirst((String) null, pattern0, "comp5111.assignment.cut.ToolBox$LocaleTools");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = ToolBox.RegExTools.replaceAll("oXw^Ib?", "", (String) null);
      assertEquals("oXw^Ib?", string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = ToolBox.RegExTools.replaceAll("aE\"^8q", (String) null, "aE\"^8q");
      assertEquals("aE\"^8q", string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = ToolBox.RegExTools.replaceAll("comp5111.assignment.cut.ToolBox$CharTools", "", "8&[+:I");
      assertEquals("8&[+:Ic8&[+:Io8&[+:Im8&[+:Ip8&[+:I58&[+:I18&[+:I18&[+:I18&[+:I.8&[+:Ia8&[+:Is8&[+:Is8&[+:Ii8&[+:Ig8&[+:In8&[+:Im8&[+:Ie8&[+:In8&[+:It8&[+:I.8&[+:Ic8&[+:Iu8&[+:It8&[+:I.8&[+:IT8&[+:Io8&[+:Io8&[+:Il8&[+:IB8&[+:Io8&[+:Ix8&[+:I$8&[+:IC8&[+:Ih8&[+:Ia8&[+:Ir8&[+:IT8&[+:Io8&[+:Io8&[+:Il8&[+:Is8&[+:I", string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = ToolBox.RegExTools.replaceAll((String) null, "comp5111.assignment.cut.ToolBox$ArrayTools", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Pattern pattern0 = Pattern.compile(">:;eY");
      String string0 = ToolBox.RegExTools.replaceAll(">:;eY", pattern0, (String) null);
      assertEquals(">:;eY", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = ToolBox.RegExTools.replaceAll("{", (Pattern) null, "}<*");
      assertEquals("{", string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("");
      String string0 = ToolBox.RegExTools.replaceAll("", pattern0, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Pattern pattern0 = Pattern.compile(":9$BbRxeW`");
      String string0 = ToolBox.RegExTools.replaceAll((String) null, pattern0, ":9$BbRxeW`");
      boolean boolean0 = ToolBox.StringTools.containsAny((CharSequence) "", (CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      int int0 = ToolBox.CharSequenceTools.lastIndexOf(charBuffer0, charBuffer0, (-22));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "\r");
      int int0 = ToolBox.CharSequenceTools.lastIndexOf(charBuffer0, "\r", 2235);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      int int0 = ToolBox.CharSequenceTools.lastIndexOf(charBuffer0, charBuffer0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = ToolBox.CharSequenceTools.lastIndexOf("5e$+<J||x{w.", "3j4^H^pwiM", 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = ToolBox.RegExTools.replacePattern((String) null, (String) null, (String) null);
      int int0 = ToolBox.CharSequenceTools.lastIndexOf("ud<S;~NF18Nutr*Es8,", string0, (-19));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      int int0 = ToolBox.CharSequenceTools.lastIndexOf(charBuffer0, 0, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      int int0 = ToolBox.CharSequenceTools.lastIndexOf(charBuffer0, 262, (-1458));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = ToolBox.CharSequenceTools.lastIndexOf("hd", (-1952), 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      char[] charArray0 = new char[6];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      int int0 = ToolBox.CharSequenceTools.lastIndexOf(charBuffer0, 1224, (byte)1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      boolean boolean0 = ToolBox.CharSequenceTools.regionMatches(charBuffer0, false, 648, charBuffer0, 0, 1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      char[] charArray0 = new char[8];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      boolean boolean0 = ToolBox.CharSequenceTools.regionMatches(charBuffer0, true, (-1604), charBuffer0, (-1604), 51);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        ToolBox.CharSequenceTools.regionMatches("", false, (-4181), (CharSequence) null, (-4181), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("comp5111.assignment.cut.ToolBox$CharSequenceTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = ToolBox.CharSequenceTools.regionMatches("", true, 2, "", (-1), 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2506);
      boolean boolean0 = ToolBox.CharSequenceTools.regionMatches(charBuffer0, true, 2506, "\r", (-1), 2506);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      boolean boolean0 = ToolBox.StringTools.containsAny((CharSequence) charBuffer0, (CharSequence) charBuffer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = ToolBox.StringTools.containsAny((CharSequence) "", (CharSequence) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = ToolBox.CharSequenceTools.indexOf("", "", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        ToolBox.CharSequenceTools.indexOf((CharSequence) null, (CharSequence) null, (-2074));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("comp5111.assignment.cut.ToolBox$CharSequenceTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'Y';
      charArray0[1] = 'l';
      charArray0[2] = ')';
      charArray0[3] = '*';
      charArray0[4] = 'o';
      charArray0[5] = '.';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      boolean boolean0 = ToolBox.StringTools.contains(charBuffer0, (byte)0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      char[] charArray0 = new char[6];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      boolean boolean0 = ToolBox.StringTools.contains(charBuffer0, (byte)0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = ToolBox.ArrayTools.isEmpty((short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      short[] shortArray0 = new short[1];
      boolean boolean0 = ToolBox.ArrayTools.isEmpty(shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = ToolBox.StringTools.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = ToolBox.StringTools.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = ToolBox.ArrayTools.isEmpty((long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      long[] longArray0 = new long[1];
      boolean boolean0 = ToolBox.ArrayTools.isEmpty(longArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = ToolBox.ArrayTools.isEmpty((int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int[] intArray0 = new int[8];
      boolean boolean0 = ToolBox.ArrayTools.isEmpty(intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ToolBox.ArrayTools.isEmpty(floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      float[] floatArray0 = new float[4];
      boolean boolean0 = ToolBox.ArrayTools.isEmpty(floatArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ToolBox.ArrayTools.isEmpty(doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      boolean boolean0 = ToolBox.ArrayTools.isEmpty(doubleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = ToolBox.StringTools.containsAny((CharSequence) "\"2", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = ToolBox.ArrayTools.isEmpty((byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ToolBox.ArrayTools.isEmpty(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = ToolBox.ArrayTools.isEmpty((boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      boolean boolean0 = ToolBox.ArrayTools.isEmpty(booleanArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        ToolBox.LocaleTools.toLocale("\r");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: \r
         //
         verifyException("comp5111.assignment.cut.ToolBox$LocaleTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        ToolBox.LocaleTools.toLocale("[,AE[#\"cBTP,g<Y+1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: [,AE[#\"cBTP,g<Y+1
         //
         verifyException("comp5111.assignment.cut.ToolBox$LocaleTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Locale locale0 = ToolBox.LocaleTools.toLocale("");
      assertEquals("", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Locale locale0 = ToolBox.LocaleTools.toLocale((String) null);
      assertNull(locale0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        ToolBox.LocaleTools.toLocale("+}_k,(/qJNj2h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: +}_k,(/qJNj2h
         //
         verifyException("comp5111.assignment.cut.ToolBox$LocaleTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Locale locale0 = ToolBox.LocaleTools.toLocale("hd");
      assertEquals("hd", locale0.toString());
      assertNotNull(locale0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        ToolBox.LocaleTools.toLocale("comp5111.assignment.cut.ToolBox");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: comp5111.assignment.cut.ToolBox
         //
         verifyException("comp5111.assignment.cut.ToolBox$LocaleTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ToolBox.ArrayTools toolBox_ArrayTools0 = new ToolBox.ArrayTools();
      assertEquals((-1), ToolBox.ArrayTools.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ToolBox.CharTools toolBox_CharTools0 = new ToolBox.CharTools();
      assertEquals('\u0000', ToolBox.CharTools.NUL);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ToolBox.CharSequenceTools toolBox_CharSequenceTools0 = new ToolBox.CharSequenceTools();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ToolBox.LocaleTools toolBox_LocaleTools0 = new ToolBox.LocaleTools();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ToolBox.RegExTools toolBox_RegExTools0 = new ToolBox.RegExTools();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ToolBox.StringTools toolBox_StringTools0 = new ToolBox.StringTools();
      assertEquals((-1), ToolBox.StringTools.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ToolBox toolBox0 = new ToolBox();
  }
}
